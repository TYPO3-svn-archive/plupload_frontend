page.includeCSS.plupload_frontend_1 = EXT:plupload_frontend/res/css/plupload.queue.css
page.includeCSS.plupload_frontend_2 = EXT:plupload_frontend/res/css/jquery.ui.plupload.css

[userFunc = user_pluploadFrontendOnCurrentPage]

    // if plupload_frontend is on current page build up validation js

lib.pluploadfrontendjs = COA
lib.pluploadfrontendjs {
    wrap = (function($){|})(jQuery);
    10 = TEXT
    10.value (

    $(function() {

        function log() {
            var str = "";

            plupload.each(arguments, function(arg) {
                var row = "";

                if (typeof(arg) != "string") {
                    plupload.each(arg, function(value, key) {
                        // Convert items in File objects to human readable form
                        if (arg instanceof plupload.File) {
                            // Convert status to human readable
                            switch (value) {
                                case plupload.QUEUED:
                                    value = 'QUEUED';
                                    break;

                                case plupload.UPLOADING:
                                    value = 'UPLOADING';
                                    break;

                                case plupload.FAILED:
                                    value = 'FAILED';
                                    break;

                                case plupload.DONE:
                                    value = 'DONE';
                                    break;
                            }
                        }

                        if (typeof(value) != "function") {
                            row += (row ? ', ' : '') + key + '=' + value;
                        }
                    });

                    str += row + " ";
                } else {
                    str += arg + " ";
                }
            });

            $('#log').append(str + "\n");
        }
                
        $("#uploader").pluploadQueue({
            // General settings
            runtimes : 'gears,flash,silverlight,browserplus,html5',
            url : '/?eID=plupload_frontend',
            max_file_size : '200mb',
            chunk_size : '1mb',
            unique_names : false,

            // Resize images on clientside if we can
            //resize : {width : 320, height : 240, quality : 90},
            rename : true,

            multipart_params : {datafield: 'testintg123'},

            // Specify what files to browse for
            filters : [
                {title : "Image files", extensions : "jpg,gif,png"},
                {title : "Zip files", extensions : "zip"}
            ],

            // Flash settings
            flash_swf_url : '/typo3conf/ext/plupload_frontend/res/js/plupload.flash.swf',

            // Silverlight settings
            silverlight_xap_url : '/typo3conf/ext/plupload_frontend/res/js/plupload.silverlight.xap',

            uploaded : function() { console.log(arguments); },
            complete : function() { alert('fertig'); },

            // PreInit events, bound before any internal events
            preinit : {
                Init: function(up, info) {
                    log('[Init]', 'Info:', info, 'Features:', up.features);
                },

                UploadFile: function(up, file) {
                    log('[UploadFile]', file);

                    // You can override settings before the file is uploaded
                    // up.settings.url = 'upload.php?id=' + file.id;
                    // up.settings.multipart_params = {param1 : 'value1', param2 : 'value2'};
                }
            },

            // Post init events, bound after the internal events
            init : {
                Refresh: function(up) {
                    // Called when upload shim is moved
                    log('[Refresh]');
                },

                StateChanged: function(up) {
                    // Called when the state of the queue is changed
                    log('[StateChanged]', up.state == plupload.STARTED ? "STARTED" : "STOPPED");
                },

                QueueChanged: function(up) {
                    // Called when the files in queue are changed by adding/removing files
                    log('[QueueChanged]');
                },

                UploadProgress: function(up, file) {
                    // Called while a file is being uploaded
                    log('[UploadProgress]', 'File:', file, "Total:", up.total);
                },

                FilesAdded: function(up, files) {
                    // Callced when files are added to queue
                    log('[FilesAdded]');

                    plupload.each(files, function(file) {
                        log('  File:', file);
                    });
                },

                FilesRemoved: function(up, files) {
                    // Called when files where removed from queue
                    log('[FilesRemoved]');

                    plupload.each(files, function(file) {
                        log('  File:', file);
                    });
                },

                FileUploaded: function(up, file, info) {
                    // Called when a file has finished uploading
                    log('[FileUploaded] File:', file, "Info:", info);
                },

                UploadComplete: function(up, files) {
                    log('[UploadComplete]');
                    plupload.each(files, function(file) {
                        log('  File:', file);
                    });
                    $.getJSON('/?eID=plupload_frontend',
                         {
                             send: true
                         },
                         function() {
                             console.info(arguments);
                         });
                },

                ChunkUploaded: function(up, file, info) {
                    // Called when a file chunk has finished uploading
                    log('[ChunkUploaded] File:', file, "Info:", info);
                },

                Error: function(up, args) {
                    // Called when a error has occured
                    log('[error] ', args);
                }
            }


        });

        // Client side form validation
        $('form').submit(function(e) {
            var uploader = $('#uploader').pluploadQueue();

            // Validate number of uploaded files
            if (uploader.total.uploaded == 0) {
                // Files in queue upload them first
                if (uploader.files.length > 0) {
                    // When all files are uploaded submit form
                    uploader.bind('UploadProgress', function() {
                        if (uploader.total.uploaded == uploader.files.length) {
                            //$('form').submit();
                        }
                    });

                    uploader.start();
                } else
                    alert('You must at least upload one file.');

                e.preventDefault();
            }
        });
    });

    )
}

[userFunc = user_powermailOnCurrentPage] && [userFunc = user_pluploadFrontendCheckT3jquery(false)]

    // if powermail is on current page and t3jquery is NOT loaded include jquery and jquery tools from cdn

page.includeJSFooter {
	plupload_frontend_10.external = 1
	plupload_frontend_10 = http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.js
	plupload_frontend_20 = EXT:plupload_frontend/res/js/gears_init.js
	plupload_frontend_30.external = 1
	plupload_frontend_30 = http://bp.yahooapis.com/2.4.21/browserplus-min.js
	plupload_frontend_40 = EXT:plupload_frontend/res/js/plupload.full.min.js
	plupload_frontend_50 = EXT:plupload_frontend/res/js/jquery.plupload.queue.min.js
}

    // if powermail is on current page and t3jquery is NOT loaded include validation js into page footer

page.footerData.20469 < lib.pluploadfrontendjs
page.footerData.20469.wrap (
 <script type="text/javascript">
 /* <![CDATA[*/
 <!--
 (function($){|})(jQuery);
 // -->
 /*]]>*/
 </script>
)

[end]

[userFunc = user_pluploadFrontendOnCurrentPage] && [userFunc = user_pluploadFrontendCheckT3jquery(true)]

    // if powermail is on current page and t3jquery is loaded include jquery and validation js using t3jquery

includeLibs.t3jquery = EXT:t3jquery/class.tx_t3jquery.php
page.20469 = COA
page.20469 {
    10 = USER
    10 {
        userFunc = tx_t3jquery->addJS
        tofooter = 1
        forceOnTop = 1
    }
    20 = USER
    20 {
        userFunc = tx_t3jquery->addJS
        jsfile = EXT:plupload_frontend/res/js/gears_init.js
        compress = 1
        tofooter = 1
    }
    30 = USER
    30 {
        userFunc = tx_t3jquery->addJS
	    jsurl = http://bp.yahooapis.com/2.4.21/browserplus-min.js
        tofooter = 1
    }
    40 = USER
    40 {
        userFunc = tx_t3jquery->addJS
        jsfile = EXT:plupload_frontend/res/js/plupload.full.min.js
        //compress = 1
        tofooter = 1
    }
    50 = USER
    50 {
        userFunc = tx_t3jquery->addJS
        jsfile = EXT:plupload_frontend/res/js/jquery.plupload.queue.min.js
        //compress = 1
        tofooter = 1
    }
    60 = USER
    60 {
        userFunc = tx_t3jquery->addJS
        jsfile = EXT:plupload_frontend/res/js/jquery.ui.plupload.min.js
        //compress = 1
        tofooter = 1
    }
    70 = USER
    70 {
        userFunc = tx_t3jquery->addJS
        jsdata.cObject < lib.pluploadfrontendjs
        compress = 1
        tofooter = 1
    }
}

[end]

[userFunc = user_pluploadFrontendOnCurrentPage] && [userFunc = user_pluploadFrontendCheckT3jqueryCDNMode(false)]

    // if powermail is on current page and t3jquery is loaded and NOT in CDN Mode delete jquery tools

page.20469.20 >

[end]
